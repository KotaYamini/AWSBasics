1. IAM refers to Identity & Access Management, Global Service
2. Root account created by default, shouldn't be used or shared.
3. Users are people within your organization, and can be grouped
4. Groups only contain users,not other groups.
5. Users don't have to belong to a group, and user can belong to multiple groups.

IAM Permissions:

1. Users or Groups can be assigned JSON documents called policies.
2. These policies define the permissions of the users.
3. In AWS, you apply the least privilege principle: dont give morepermissions than a user needs.

{
"Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"Action": "ec2: Describe*",
"Resource": "*"
},
{
"Effect": "Allow",
"Action": "elasticloadbalancing: Describe*",
"Resource": "*"
},
{
"Effect": "Allow",
"Action": [
"cloudwatch:ListMetrics",
"cloudwatch:GetMetricsStatistics",
"cloudwatch:Describe"
],
"Resource": "\*"
}
]
}

## IAM Policies Structure

Consists of

1.  Version: policy language version, always include "2012-10-17".
2.  Id: an identifier for the policy(optional).
3.  Statement: one or more individual statements(required).

Statements consists of

1.  Sid: an identifier for the statement(optional).
2.  Effect: whether the statement allows or denies access(Allow, Deny).
3.  Principal: account/user/role to which this policy applied to
4.  Action: list of actions this policy allows or denies.
5.  Resource: list of resources to which the actions applied to
6.  Condition: conditions for when this policy is in effect(optional).

{
"Version": "2012-10-17",
"Id": "S3-Account-Permissions",
"Statement": [
{
"Sid" : "1",
"Effect" : "Allow",
"Principal": {
"AWS": ["arn:aws:iam::123456789012:root"]
},
"Action": [
"s3:GetObject",
"s3:PutObject"
],
"Resource": ["arn:aws:s3:::mybucket/*"]
}
]
}

## IAM - Password Policy

1. Strong passwords = higher security for your account
2. In AWS, you can setup a password policy:

- Set a minimum password length
- Require specific character types:
  a. including uppercase letters
  b. lowercase letters
  c. numbers
  d. non-alphanumeric characters
- Allow all IAM users to change their own passwords.
- Require users to change their password after some time (password expiration).
- Prevent password re-use.

## Multi Factor Authentication - MFA

1. Users have access to your account and can possibly change configurations or delete resources in your AWS account.
2. You want to protect your Root Accounts and IAM users.
3. MFA = password you know + security device you own

# Main benefit of MFA:

If a password is stolen or hacked, the account is not compromised.

Virtual MFA Device:

1. Google Authenticator
2. Authy(multi-device)

Both of them support for multiple tokens on a single device.

3. Universal 2nd Factor(U2F) Security Key
   -YubiKey by Yubico (3rd party)
   Support for multiple root and IAM users using a single security key.

# MFA Devices options in AWS

1. Hardware Key Fob MFA Device
   - Provided by Gemalto (3rd party)
2. Hardware Key Fob MFA Device for AWS GovCloud (US)
   - Provided by SurePassID(3rd party).

# AWS Access Keys:

To access AWS, you have three options:

1. AWS Management console(protected by password + MFA).
2. AWS Command Line Interface(CLI): protected by access keys.
3. AWS Software Developer Kit(SDK)- for code: protected by access keys.

- Access Keys are generated through the AWS Console.
- Users manage their own access keys
- Access Keys are secret, just like a password. Dont share them.
- Access Key ID ~= username
- Secret Access Key ~= password

# AWS CLI:

- A tool that enables you to interact with AWS services using commands in your command-line shell.
- Direct access to the public APIs of AWS services.
- You can develop scripts to manage your resources.
- Its open-source https://github.com/aws/aws-cli
- Alternative to using AWS Management Console.

# AWS SDK :

1. AWS Software Development Kit (AWS SDK)
2. Language-specific APIs (set of libraries)
3. Enables you to access and manage AWS services programmatically.
4. Embedded within your application
5. Supports
   - SDKs(Javascript, Python, PHP, .NET, Ruby, Java, Go, Node.js, C++)
   - Mobile SDKs(Android, iOS, ...)
   - IoT Device SDKs(Embedded C, Arudino, ...)
6. Example: AWS CLI built on AWS SDK for Python using Boto library.

# IAM Roles for Services

1. Some AWS service will need to perform actions on your behalf.
2. To do so, we will assign permissions to AWS services with IAM roles.

Example. We have an EC2 (virtual server) attached with IAM Role in order to access the AWS.

Common Roles:

1. EC2 Instance Roles.
2. Lambda Function Roles.
3. Roles for CloudFormation.

# IAM Security Tools

1. IAM Credentials Report (account-level)

- A report that lists all your account's users and the status of their various credentials.

2. IAM Access Advisor (user-level)

- Access Advisor shows the service permissions granted to a user and when those services were last accessed.
